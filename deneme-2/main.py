# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\baris\OneDrive\Masaüstü\hackathon\son\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import mysql.connector
from mysql.connector import Error
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import numpy as np

class DatabaseConnection:
    def __init__(self):
        self.connection = None
        try:
            self.connection = mysql.connector.connect(
                host='localhost',
                user='root',
                password='bariscan',
                database='hackathon'
            )
            if self.connection.is_connected():
                print("MySQL veritabanına başarıyla bağlandı")
                # Veritabanı bağlantısını test et
                cursor = self.connection.cursor()
                cursor.execute("SELECT COUNT(*) FROM projeler")
                count = cursor.fetchone()[0]
                print(f"Veritabanında {count} proje bulundu")
                cursor.close()
        except Error as e:
            print(f"Bağlantı hatası: {e}")

    def get_connection(self):
        if not self.connection or not self.connection.is_connected():
            try:
                self.connection = mysql.connector.connect(
                    host='localhost',
                    user='root',
                    password='bariscan',
                    database='hackathon'
                )
                print("MySQL veritabanına yeniden bağlandı")
            except Error as e:
                print(f"Yeniden bağlantı hatası: {e}")
        return self.connection

    def close_connection(self):
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("MySQL bağlantısı kapatıldı")

class Ui_MainWindow(object):
    def __init__(self):
        self.db = DatabaseConnection()
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.showMaximized()  # Tam ekran başlat
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))  # Minimum boyutu küçülttüm
        MainWindow.setStyleSheet("QMainWindow {\n"
"    background-color: #a29bfe;\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("QWidget {\n"
"    background-color: #a29bfe;\n"
"}")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        
        # Başlık etiketi
        self.label_baslik = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)  # Font boyutunu küçülttüm
        font.setBold(True)
        font.setWeight(75)
        self.label_baslik.setFont(font)
        self.label_baslik.setStyleSheet("color: white;")
        self.label_baslik.setAlignment(QtCore.Qt.AlignCenter)
        self.label_baslik.setObjectName("label_baslik")
        self.verticalLayout.addWidget(self.label_baslik)
        
        # Ana içerik için yatay düzen
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        # Sol panel (butonlar ve combobox'lar için)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setMinimumSize(QtCore.QSize(250, 0))  # Minimum genişliği küçülttüm
        self.frame.setMaximumSize(QtCore.QSize(300, 16777215))  # Maksimum genişlik ekledim
        self.frame.setStyleSheet("QFrame {\n"
"    background-color: #6c5ce7;\n"
"    border-radius: 10px;\n"
"    padding: 10px;\n"
"}")
        self.frame.setObjectName("frame")
        
        # Sol panel düzeni
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        
        # ComboBox'lar için scroll area
        self.scrollArea = QtWidgets.QScrollArea(self.frame)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollArea.setStyleSheet("QScrollArea { border: none; }")
        
        self.scrollContent = QtWidgets.QWidget()
        self.scrollContent.setObjectName("scrollContent")
        self.scrollLayout = QtWidgets.QVBoxLayout(self.scrollContent)
        
        # Projeler Label
        self.label_projeler = QtWidgets.QLabel("PROJELER")
        self.label_projeler.setStyleSheet("color: white; font-weight: bold; font-size: 12px;")
        self.scrollLayout.addWidget(self.label_projeler)
        
        # ComboBox'ları scroll area'ya ekle
        self.combobox_proje = QtWidgets.QComboBox(self.scrollContent)
        self.combobox_proje.setMinimumSize(QtCore.QSize(0, 25))  # Yüksekliği küçülttüm
        self.combobox_proje.setStyleSheet("QComboBox {\n"
"    border: 1px solid #a29bfe;\n"
"    border-radius: 5px;\n"
"    padding: 5px;\n"
"    background: white;\n"
"}\n"
"QComboBox:hover {\n"
"    border: 1px solid #ffffff;\n"
"}")
        self.scrollLayout.addWidget(self.combobox_proje)
        
        # Raporlar Label
        self.label_raporlar = QtWidgets.QLabel("RAPORLAR")
        self.label_raporlar.setStyleSheet("color: white; font-weight: bold; font-size: 12px;")
        self.scrollLayout.addWidget(self.label_raporlar)
        
        # Diğer ComboBox'lar için de aynı stil ve boyut
        self.combobox_raporlar = QtWidgets.QComboBox(self.scrollContent)
        self.combobox_raporlar.setMinimumSize(QtCore.QSize(0, 25))
        self.combobox_raporlar.setStyleSheet(self.combobox_proje.styleSheet())
        self.scrollLayout.addWidget(self.combobox_raporlar)
        
        # Riskler Label
        self.label_riskler = QtWidgets.QLabel("RİSKLER")
        self.label_riskler.setStyleSheet("color: white; font-weight: bold; font-size: 12px;")
        self.scrollLayout.addWidget(self.label_riskler)
        
        self.combobox_riskler = QtWidgets.QComboBox(self.scrollContent)
        self.combobox_riskler.setMinimumSize(QtCore.QSize(0, 25))
        self.combobox_riskler.setStyleSheet(self.combobox_proje.styleSheet())
        self.scrollLayout.addWidget(self.combobox_riskler)
        
        self.scrollArea.setWidget(self.scrollContent)
        self.verticalLayout_2.addWidget(self.scrollArea)
        
        # Butonlar için scroll area
        self.buttonScrollArea = QtWidgets.QScrollArea(self.frame)
        self.buttonScrollArea.setWidgetResizable(True)
        self.buttonScrollArea.setObjectName("buttonScrollArea")
        self.buttonScrollArea.setStyleSheet("QScrollArea { border: none; }")
        
        self.buttonContent = QtWidgets.QWidget()
        self.buttonContent.setObjectName("buttonContent")
        self.buttonLayout = QtWidgets.QVBoxLayout(self.buttonContent)
        
        # Butonları button scroll area'ya ekle
        self.button_goster = QtWidgets.QPushButton(self.buttonContent)
        self.button_goster.setMinimumSize(QtCore.QSize(0, 30))
        self.button_goster.setStyleSheet("QPushButton {\n"
"    background-color: #a29bfe;\n"
"    color: white;\n"
"    border: none;\n"
"    border-radius: 5px;\n"
"    padding: 5px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #ffffff;\n"
"    color: #6c5ce7;\n"
"}")
        self.buttonLayout.addWidget(self.button_goster)
        
        # Diğer butonlar için de aynı stil ve boyut
        self.pushButton_2 = QtWidgets.QPushButton(self.buttonContent)
        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_2.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.pushButton_2)
        
        self.pushButton = QtWidgets.QPushButton(self.buttonContent)
        self.pushButton.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.pushButton)
        
        self.pushButton_3 = QtWidgets.QPushButton(self.buttonContent)
        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_3.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.pushButton_3)
        
        self.pushButton_4 = QtWidgets.QPushButton(self.buttonContent)
        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 30))
        self.pushButton_4.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.pushButton_4)
        
        # Veri ekleme butonları
        self.button_kullanici_ekle = QtWidgets.QPushButton(self.buttonContent)
        self.button_kullanici_ekle.setMinimumSize(QtCore.QSize(0, 30))
        self.button_kullanici_ekle.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_kullanici_ekle)

        self.button_gorev_ekle = QtWidgets.QPushButton(self.buttonContent)
        self.button_gorev_ekle.setMinimumSize(QtCore.QSize(0, 30))
        self.button_gorev_ekle.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_gorev_ekle)

        self.button_risk_ekle = QtWidgets.QPushButton(self.buttonContent)
        self.button_risk_ekle.setMinimumSize(QtCore.QSize(0, 30))
        self.button_risk_ekle.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_risk_ekle)

        self.button_proje_ekle = QtWidgets.QPushButton(self.buttonContent)
        self.button_proje_ekle.setMinimumSize(QtCore.QSize(0, 30))
        self.button_proje_ekle.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_proje_ekle)

        # Tablo butonları
        self.button_show_projeler = QtWidgets.QPushButton(self.buttonContent)
        self.button_show_projeler.setMinimumSize(QtCore.QSize(0, 30))
        self.button_show_projeler.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_show_projeler)

        self.button_show_gorevler = QtWidgets.QPushButton(self.buttonContent)
        self.button_show_gorevler.setMinimumSize(QtCore.QSize(0, 30))
        self.button_show_gorevler.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_show_gorevler)

        self.button_show_raporlar = QtWidgets.QPushButton(self.buttonContent)
        self.button_show_raporlar.setMinimumSize(QtCore.QSize(0, 30))
        self.button_show_raporlar.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_show_raporlar)

        self.button_show_kullanicilar = QtWidgets.QPushButton(self.buttonContent)
        self.button_show_kullanicilar.setMinimumSize(QtCore.QSize(0, 30))
        self.button_show_kullanicilar.setStyleSheet(self.button_goster.styleSheet())
        self.buttonLayout.addWidget(self.button_show_kullanicilar)
        
        self.buttonScrollArea.setWidget(self.buttonContent)
        self.verticalLayout_2.addWidget(self.buttonScrollArea)
        
        self.horizontalLayout.addWidget(self.frame)
        
        # Sağ panel (tablo ve grafik için)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        
        # Grafik seçimi için combobox
        self.combobox_grafik_turu = QtWidgets.QComboBox()
        self.combobox_grafik_turu.setMinimumSize(QtCore.QSize(200, 30))
        self.combobox_grafik_turu.setStyleSheet("""
            QComboBox {
                background-color: white;
                border: 1px solid #a29bfe;
                border-radius: 5px;
                padding: 5px;
            }
            QComboBox:hover {
                border: 1px solid #6c5ce7;
            }
        """)
        self.combobox_grafik_turu.addItems([
            "Proje İlerleme Grafiği",
            "Risk Analiz Grafiği",
            "Aylık İlerleme Grafiği",
            "Görev Durumları Grafiği",
            "Proje Tamamlanma Grafiği"
        ])
        self.verticalLayout_3.addWidget(self.combobox_grafik_turu)
        
        # Tablo
        self.tablo = QtWidgets.QTableWidget(self.centralwidget)
        self.tablo.setStyleSheet("QTableWidget {\n"
"    border: 1px solid #a29bfe;\n"
"    border-radius: 10px;\n"
"    background: white;\n"
"}\n"
"QTableWidget::item {\n"
"    padding: 5px;\n"
"}\n"
"QHeaderView::section {\n"
"    background-color: #6c5ce7;\n"
"    color: white;\n"
"    padding: 5px;\n"
"    border: 1px solid #a29bfe;\n"
"}")
        self.tablo.setObjectName("tablo")
        self.tablo.setColumnCount(0)
        self.tablo.setRowCount(0)
        self.verticalLayout_3.addWidget(self.tablo)
        
        # Grafik
        self.grafik = QtWidgets.QGraphicsView(self.centralwidget)
        self.grafik.setMinimumSize(QtCore.QSize(0, 300))  # Minimum yükseklik ekledim
        self.grafik.setStyleSheet("QGraphicsView {\n"
"    border: 1px solid #a29bfe;\n"
"    border-radius: 10px;\n"
"    background: white;\n"
"}")
        self.grafik.setObjectName("grafik")
        self.verticalLayout_3.addWidget(self.grafik)
        
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.verticalLayout.addLayout(self.horizontalLayout)
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Proje Takip ve Raporlama Sistemi"))
        self.label_baslik.setText(_translate("MainWindow", "PROJE TAKİP VE RAPORLAMA SİSTEMİ"))
        
        # Buton metinleri
        self.button_goster.setText(_translate("MainWindow", "Göster"))
        self.pushButton_2.setText(_translate("MainWindow", "Rapor"))
        self.pushButton.setText(_translate("MainWindow", "Grafik Göster"))
        self.pushButton_3.setText(_translate("MainWindow", "Riskler"))
        self.pushButton_4.setText(_translate("MainWindow", "İndir"))
        
        # Veri ekleme butonları
        self.button_kullanici_ekle.setText(_translate("MainWindow", "Kullanıcı Ekle"))
        self.button_gorev_ekle.setText(_translate("MainWindow", "Görev Ekle"))
        self.button_risk_ekle.setText(_translate("MainWindow", "Risk Ekle"))
        self.button_proje_ekle.setText(_translate("MainWindow", "Proje Ekle"))
        
        # Tablo butonları
        self.button_show_projeler.setText(_translate("MainWindow", "Projeler Tablosu"))
        self.button_show_gorevler.setText(_translate("MainWindow", "Görevler Tablosu"))
        self.button_show_raporlar.setText(_translate("MainWindow", "Raporlar Tablosu"))
        self.button_show_kullanicilar.setText(_translate("MainWindow", "Kullanıcılar Tablosu"))
        
        # ComboBox'ları doldur
        self.load_projects()
        self.load_reports()
        self.load_risks()
        
        # Proje değiştiğinde rapor ve risk listelerini güncelle
        self.combobox_proje.currentIndexChanged.connect(self.on_project_changed)
        
        # Buton bağlantılarını kur
        self.button_goster.clicked.connect(self.show_selected_data)
        self.pushButton_2.clicked.connect(self.show_template_report)
        self.pushButton.clicked.connect(self.show_selected_graph)
        self.pushButton_3.clicked.connect(self.show_risk_analysis_graph)
        self.pushButton_4.clicked.connect(self.download_data)
        self.button_kullanici_ekle.clicked.connect(self.add_user)
        self.button_gorev_ekle.clicked.connect(self.add_task)
        self.button_risk_ekle.clicked.connect(self.add_risk)
        self.button_proje_ekle.clicked.connect(self.add_project)
        self.button_show_projeler.clicked.connect(self.show_projeler_table)
        self.button_show_gorevler.clicked.connect(self.show_gorevler_table)
        self.button_show_raporlar.clicked.connect(self.show_raporlar_table)
        self.button_show_kullanicilar.clicked.connect(self.show_kullanicilar_table)

    def on_project_changed(self):
        """Proje değiştiğinde rapor ve risk listelerini güncelle"""
        self.load_reports()
        self.load_risks()
        # Tabloyu temizle
        self.tablo.setRowCount(0)
        self.tablo.setColumnCount(0)
        # Grafik alanını temizle
        self.grafik.setScene(QtWidgets.QGraphicsScene())

    def update_table(self, data):
        if data:
            self.tablo.setRowCount(len(data))
            self.tablo.setColumnCount(10)
            headers = ["ID", "Proje Adı", "Açıklama", "Başlangıç Tarihi", "Bitiş Tarihi", 
                      "Durum", "Rapor Başlığı", "Görev Başlığı", "Sorumlu Kişi", "İlerleme Oranı"]
            self.tablo.setHorizontalHeaderLabels(headers)
            
            # Sütun genişliklerini ayarla
            self.tablo.setColumnWidth(0, 50)  # ID
            self.tablo.setColumnWidth(1, 150)  # Proje Adı
            self.tablo.setColumnWidth(2, 200)  # Açıklama
            self.tablo.setColumnWidth(3, 100)  # Başlangıç Tarihi
            self.tablo.setColumnWidth(4, 100)  # Bitiş Tarihi
            self.tablo.setColumnWidth(5, 100)  # Durum
            self.tablo.setColumnWidth(6, 150)  # Rapor Başlığı
            self.tablo.setColumnWidth(7, 150)  # Görev Başlığı
            self.tablo.setColumnWidth(8, 150)  # Sorumlu Kişi
            self.tablo.setColumnWidth(9, 100)  # İlerleme Oranı
            
            for i, row in enumerate(data):
                for j, value in enumerate(row):
                    if isinstance(value, datetime):
                        value = value.strftime('%Y-%m-%d')
                    elif value is None:
                        value = ""
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.tablo.setItem(i, j, item)

    def add_user(self):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Kullanıcı Ekle")
        layout = QtWidgets.QVBoxLayout()

        # Form alanları
        ad_soyad = QtWidgets.QLineEdit()
        eposta = QtWidgets.QLineEdit()
        rol = QtWidgets.QComboBox()
        rol.addItems(["Yönetici", "Geliştirici", "Test Uzmanı", "Proje Yöneticisi"])

        # Form düzeni
        form_layout = QtWidgets.QFormLayout()
        form_layout.addRow("Ad Soyad:", ad_soyad)
        form_layout.addRow("E-posta:", eposta)
        form_layout.addRow("Rol:", rol)
        layout.addLayout(form_layout)

        # Butonlar
        buttons = QtWidgets.QHBoxLayout()
        save_button = QtWidgets.QPushButton("Kaydet")
        cancel_button = QtWidgets.QPushButton("İptal")
        buttons.addWidget(save_button)
        buttons.addWidget(cancel_button)
        layout.addLayout(buttons)

        dialog.setLayout(layout)

        def save_user():
            try:
                cursor = self.db.get_connection().cursor()
                cursor.execute("""
                    INSERT INTO kullanicilar (ad_soyad, eposta, rol)
                    VALUES (%s, %s, %s)
                """, (ad_soyad.text(), eposta.text(), rol.currentText()))
                self.db.get_connection().commit()
                dialog.accept()
            except Error as e:
                print(f"Kullanıcı eklenirken hata: {e}")

        save_button.clicked.connect(save_user)
        cancel_button.clicked.connect(dialog.reject)
        dialog.exec_()

    def add_task(self):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Görev Ekle")
        layout = QtWidgets.QVBoxLayout()

        # Form alanları
        baslik = QtWidgets.QLineEdit()
        aciklama = QtWidgets.QTextEdit()
        baslangic_tarihi = QtWidgets.QDateEdit()
        bitis_tarihi = QtWidgets.QDateEdit()
        durum = QtWidgets.QComboBox()
        durum.addItems(["Atandı", "Devam Ediyor", "Tamamlandı"])
        oncelik = QtWidgets.QComboBox()
        oncelik.addItems(["Düşük", "Orta", "Yüksek"])
        proje = QtWidgets.QComboBox()
        
        # Projeleri yükle
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("SELECT id, ad FROM projeler")
            projeler = cursor.fetchall()
            for proje_id, proje_adi in projeler:
                proje.addItem(proje_adi, proje_id)
        except Error as e:
            print(f"Projeler yüklenirken hata: {e}")

        # Form düzeni
        form_layout = QtWidgets.QFormLayout()
        form_layout.addRow("Başlık:", baslik)
        form_layout.addRow("Açıklama:", aciklama)
        form_layout.addRow("Başlangıç Tarihi:", baslangic_tarihi)
        form_layout.addRow("Bitiş Tarihi:", bitis_tarihi)
        form_layout.addRow("Durum:", durum)
        form_layout.addRow("Öncelik:", oncelik)
        form_layout.addRow("Proje:", proje)
        layout.addLayout(form_layout)

        # Butonlar
        buttons = QtWidgets.QHBoxLayout()
        save_button = QtWidgets.QPushButton("Kaydet")
        cancel_button = QtWidgets.QPushButton("İptal")
        buttons.addWidget(save_button)
        buttons.addWidget(cancel_button)
        layout.addLayout(buttons)

        dialog.setLayout(layout)

        def save_task():
            try:
                cursor = self.db.get_connection().cursor()
                cursor.execute("""
                    INSERT INTO gorevler (baslik, aciklama, baslangic_tarihi, bitis_tarihi, 
                                        durum, oncelik, proje_id)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (baslik.text(), aciklama.toPlainText(), 
                      baslangic_tarihi.date().toPyDate(),
                      bitis_tarihi.date().toPyDate(),
                      durum.currentText(), oncelik.currentText(),
                      proje.currentData()))
                self.db.get_connection().commit()
                dialog.accept()
            except Error as e:
                print(f"Görev eklenirken hata: {e}")

        save_button.clicked.connect(save_task)
        cancel_button.clicked.connect(dialog.reject)
        dialog.exec_()

    def add_project(self):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Proje Ekle")
        layout = QtWidgets.QVBoxLayout()

        # Form alanları
        ad = QtWidgets.QLineEdit()
        aciklama = QtWidgets.QTextEdit()
        baslangic_tarihi = QtWidgets.QDateEdit()
        bitis_tarihi = QtWidgets.QDateEdit()
        durum = QtWidgets.QComboBox()
        durum.addItems(["Planlandı", "Devam Ediyor", "Tamamlandı"])
        oncelik = QtWidgets.QComboBox()
        oncelik.addItems(["Düşük", "Orta", "Yüksek"])

        # Form düzeni
        form_layout = QtWidgets.QFormLayout()
        form_layout.addRow("Proje Adı:", ad)
        form_layout.addRow("Açıklama:", aciklama)
        form_layout.addRow("Başlangıç Tarihi:", baslangic_tarihi)
        form_layout.addRow("Bitiş Tarihi:", bitis_tarihi)
        form_layout.addRow("Durum:", durum)
        form_layout.addRow("Öncelik:", oncelik)
        layout.addLayout(form_layout)

        # Butonlar
        buttons = QtWidgets.QHBoxLayout()
        save_button = QtWidgets.QPushButton("Kaydet")
        cancel_button = QtWidgets.QPushButton("İptal")
        buttons.addWidget(save_button)
        buttons.addWidget(cancel_button)
        layout.addLayout(buttons)

        dialog.setLayout(layout)

        def save_project():
            try:
                cursor = self.db.get_connection().cursor()
                cursor.execute("""
                    INSERT INTO projeler (ad, aciklama, baslangic_tarihi, bitis_tarihi, 
                                        durum, oncelik)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (ad.text(), aciklama.toPlainText(), 
                      baslangic_tarihi.date().toPyDate(),
                      bitis_tarihi.date().toPyDate(),
                      durum.currentText(), oncelik.currentText()))
                self.db.get_connection().commit()
                dialog.accept()
            except Error as e:
                print(f"Proje eklenirken hata: {e}")

        save_button.clicked.connect(save_project)
        cancel_button.clicked.connect(dialog.reject)
        dialog.exec_()

    def add_risk(self):
        dialog = QtWidgets.QDialog()
        dialog.setWindowTitle("Risk Ekle")
        layout = QtWidgets.QVBoxLayout()

        # Form alanları
        baslik = QtWidgets.QLineEdit()
        aciklama = QtWidgets.QTextEdit()
        etki = QtWidgets.QComboBox()
        etki.addItems(["Kritik", "Yüksek", "Orta", "Düşük"])
        olasilik = QtWidgets.QComboBox()
        olasilik.addItems(["Yüksek", "Orta", "Düşük"])
        proje = QtWidgets.QComboBox()
        
        # Projeleri yükle
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("SELECT id, ad FROM projeler")
            projeler = cursor.fetchall()
            for proje_id, proje_adi in projeler:
                proje.addItem(proje_adi, proje_id)
        except Error as e:
            print(f"Projeler yüklenirken hata: {e}")

        # Form düzeni
        form_layout = QtWidgets.QFormLayout()
        form_layout.addRow("Risk Başlığı:", baslik)
        form_layout.addRow("Açıklama:", aciklama)
        form_layout.addRow("Etki:", etki)
        form_layout.addRow("Olasılık:", olasilik)
        form_layout.addRow("Proje:", proje)
        layout.addLayout(form_layout)

        # Butonlar
        buttons = QtWidgets.QHBoxLayout()
        save_button = QtWidgets.QPushButton("Kaydet")
        cancel_button = QtWidgets.QPushButton("İptal")
        buttons.addWidget(save_button)
        buttons.addWidget(cancel_button)
        layout.addLayout(buttons)

        dialog.setLayout(layout)

        def save_risk():
            try:
                cursor = self.db.get_connection().cursor()
                
                # Risk açıklamasını oluştur
                risk_aciklama = f"""
                RİSK ANALİZİ
                ============
                
                Proje: {proje.currentText()}
                Tarih: {datetime.now().strftime('%Y-%m-%d')}
                
                Risk Detayları:
                - Başlık: {baslik.text()}
                - Etki Seviyesi: {etki.currentText()}
                - Olasılık: {olasilik.currentText()}
                
                Risk Açıklaması:
                {aciklama.toPlainText()}
                
                Risk Yönetimi:
                1. Risk izleme planı oluşturulacak
                2. Düzenli risk değerlendirmesi yapılacak
                3. Risk azaltma stratejileri belirlenecek
                
                Önerilen Aksiyonlar:
                1. Riskin etkisini azaltmak için önlemler alınmalı
                2. Alternatif çözümler geliştirilmeli
                3. Risk durumu düzenli olarak gözden geçirilmeli
                
                Not: Bu risk kaydı otomatik olarak oluşturulmuştur.
                """
                
                # Önce görevi ekle
                cursor.execute("""
                    INSERT INTO gorevler (baslik, aciklama, durum, oncelik, proje_id)
                    VALUES (%s, %s, 'Devam Ediyor', %s, %s)
                """, (baslik.text(), risk_aciklama, etki.currentText(), proje.currentData()))
                
                self.db.get_connection().commit()
                dialog.accept()
                
                # Riskleri yeniden yükle
                self.load_risks()
                
                QtWidgets.QMessageBox.information(None, "Başarılı", "Risk başarıyla eklendi!")
            except Error as e:
                print(f"Risk eklenirken hata: {e}")
                QtWidgets.QMessageBox.critical(None, "Hata", f"Risk eklenirken hata oluştu: {e}")

        save_button.clicked.connect(save_risk)
        cancel_button.clicked.connect(dialog.reject)
        dialog.exec_()

    def load_projects(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("SELECT id, ad FROM projeler")
            projects = cursor.fetchall()
            self.combobox_proje.clear()
            for project_id, project_name in projects:
                self.combobox_proje.addItem(project_name, project_id)
            print(f"Projeler yüklendi: {len(projects)} adet")
        except Error as e:
            print(f"Projeler yüklenirken hata: {e}")

    def load_reports(self):
        try:
            cursor = self.db.get_connection().cursor()
            # Seçili projenin raporlarını getir
            cursor.execute("""
                SELECT r.id, r.baslik, p.ad as proje_adi
                FROM raporlar r
                JOIN proje_raporlar pr ON r.id = pr.rapor_id
                JOIN projeler p ON pr.proje_id = p.id
                WHERE p.id = %s
                ORDER BY r.id DESC
            """, (self.combobox_proje.currentData(),))
            reports = cursor.fetchall()
            self.combobox_raporlar.clear()
            for report_id, report_title, project_name in reports:
                self.combobox_raporlar.addItem(f"{report_title} - {project_name}", report_id)
            print(f"Raporlar yüklendi: {len(reports)} adet")
        except Error as e:
            print(f"Raporlar yüklenirken hata: {e}")

    def load_risks(self):
        try:
            cursor = self.db.get_connection().cursor()
            # Seçili projenin risklerini getir
            cursor.execute("""
                SELECT g.id, g.baslik, p.ad, g.aciklama, g.oncelik, g.durum
                FROM gorevler g 
                JOIN projeler p ON g.proje_id = p.id 
                WHERE g.durum = 'Devam Ediyor' AND g.oncelik IN ('Yüksek', 'Orta', 'Düşük', 'Kritik')
                AND p.id = %s
                ORDER BY 
                    CASE g.oncelik 
                        WHEN 'Kritik' THEN 1 
                        WHEN 'Yüksek' THEN 2 
                        WHEN 'Orta' THEN 3 
                        WHEN 'Düşük' THEN 4 
                    END,
                    g.id DESC
            """, (self.combobox_proje.currentData(),))
            risks = cursor.fetchall()
            self.combobox_riskler.clear()
            for risk_id, risk_title, project_name, risk_desc, priority, status in risks:
                self.combobox_riskler.addItem(f"{risk_title} ({priority})", risk_id)
            print(f"Riskler yüklendi: {len(risks)} adet")
        except Error as e:
            print(f"Riskler yüklenirken hata: {e}")

    def show_selected_data(self):
        try:
            cursor = self.db.get_connection().cursor()
            # Seçili projenin raporlarını getir
            cursor.execute("""
                SELECT r.id, r.baslik, r.icerik, p.ad as proje_adi, pr.ilerleme_orani
                FROM raporlar r
                JOIN proje_raporlar pr ON r.id = pr.rapor_id
                JOIN projeler p ON pr.proje_id = p.id
                WHERE p.id = %s
                ORDER BY r.id DESC
            """, (self.combobox_proje.currentData(),))
            data = cursor.fetchall()
            
            if data:
                self.tablo.setRowCount(len(data))
                self.tablo.setColumnCount(5)
                headers = ["ID", "Başlık", "İçerik", "Proje", "İlerleme Oranı"]
                self.tablo.setHorizontalHeaderLabels(headers)
                
                # Sütun genişliklerini ayarla
                self.tablo.setColumnWidth(0, 50)  # ID
                self.tablo.setColumnWidth(1, 150)  # Başlık
                self.tablo.setColumnWidth(2, 300)  # İçerik
                self.tablo.setColumnWidth(3, 150)  # Proje
                self.tablo.setColumnWidth(4, 100)  # İlerleme Oranı
                
                for i, row in enumerate(data):
                    for j, value in enumerate(row):
                        if value is None:
                            value = ""
                        item = QtWidgets.QTableWidgetItem(str(value))
                        self.tablo.setItem(i, j, item)
                
                print(f"Raporlar tablosu gösterildi: {len(data)} satır")
            else:
                QtWidgets.QMessageBox.information(None, "Bilgi", "Bu proje için rapor bulunmamaktadır.")
                
        except Error as e:
            print(f"Raporlar gösterilirken hata: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Raporlar gösterilirken hata oluştu: {e}")

    def show_template_report(self):
        try:
            if self.combobox_proje.currentData() is None:
                QtWidgets.QMessageBox.warning(None, "Uyarı", "Lütfen bir proje seçin!")
                return

            # Rapor penceresi oluştur
            dialog = QtWidgets.QDialog()
            dialog.setWindowTitle("Proje Raporu")
            dialog.setMinimumSize(800, 600)
            
            # Ana layout
            layout = QtWidgets.QVBoxLayout()
            
            # Rapor metni için text edit
            text_edit = QtWidgets.QTextEdit()
            text_edit.setReadOnly(True)
            text_edit.setStyleSheet("""
                QTextEdit {
                    background-color: white;
                    font-family: Arial;
                    font-size: 12px;
                    padding: 10px;
                }
            """)
            
            # Proje bilgilerini al
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT 
                    p.ad, p.aciklama, p.baslangic_tarihi, p.bitis_tarihi,
                    p.durum, p.oncelik,
                    COUNT(DISTINCT g.id) as gorev_sayisi,
                    COUNT(DISTINCT CASE WHEN g.durum = 'Tamamlandı' THEN g.id END) as tamamlanan_gorev,
                    COALESCE(AVG(pr.ilerleme_orani), 0) as ortalama_ilerleme
                FROM projeler p
                LEFT JOIN gorevler g ON p.id = g.proje_id
                LEFT JOIN proje_raporlar pr ON p.id = pr.proje_id
                WHERE p.id = %s
                GROUP BY p.id, p.ad, p.aciklama, p.baslangic_tarihi, p.bitis_tarihi, p.durum, p.oncelik
            """, (self.combobox_proje.currentData(),))
            
            proje_data = cursor.fetchone()
            
            if proje_data:
                # Rapor şablonunu oluştur
                rapor_metni = f"""
                PROJE RAPORU
                ============

                Proje Bilgileri:
                ---------------
                Proje Adı: {proje_data[0]}
                Durum: {proje_data[4]}
                Öncelik: {proje_data[5]}
                Başlangıç Tarihi: {proje_data[2].strftime('%d.%m.%Y') if proje_data[2] else 'Belirtilmemiş'}
                Bitiş Tarihi: {proje_data[3].strftime('%d.%m.%Y') if proje_data[3] else 'Belirtilmemiş'}
                İlerleme Oranı: %{float(proje_data[8]):.1f}

                Proje Açıklaması:
                ----------------
                {proje_data[1] if proje_data[1] else 'Açıklama bulunmuyor'}

                Görev İstatistikleri:
                -------------------
                Toplam Görev Sayısı: {proje_data[6]}
                Tamamlanan Görev: {proje_data[7]}
                Devam Eden Görev: {proje_data[6] - proje_data[7]}
                Tamamlanma Oranı: %{(proje_data[7] / proje_data[6] * 100 if proje_data[6] > 0 else 0):.1f}

                Son Durum:
                ---------
                """
                
                # Son görevleri al
                cursor.execute("""
                    SELECT g.baslik, g.durum, g.oncelik
                    FROM gorevler g
                    WHERE g.proje_id = %s
                    ORDER BY g.id DESC
                    LIMIT 5
                """, (self.combobox_proje.currentData(),))
                
                son_gorevler = cursor.fetchall()
                if son_gorevler:
                    rapor_metni += "\nSon Görevler:\n"
                    for gorev in son_gorevler:
                        rapor_metni += f"- {gorev[0]} ({gorev[1]}, {gorev[2]})\n"
                
                # Riskleri al
                cursor.execute("""
                    SELECT g.baslik, g.oncelik
                    FROM gorevler g
                    WHERE g.proje_id = %s 
                    AND g.durum = 'Devam Ediyor'
                    AND g.oncelik IN ('Kritik', 'Yüksek')
                    ORDER BY 
                        CASE g.oncelik 
                            WHEN 'Kritik' THEN 1 
                            WHEN 'Yüksek' THEN 2 
                        END
                """, (self.combobox_proje.currentData(),))
                
                riskler = cursor.fetchall()
                if riskler:
                    rapor_metni += "\nAktif Riskler:\n"
                    for risk in riskler:
                        rapor_metni += f"- {risk[0]} ({risk[1]})\n"
                
                # Raporu text edit'e ekle
                text_edit.setText(rapor_metni)
                
                # Layout'a ekle
                layout.addWidget(text_edit)
                
                # Kapat butonu
                close_button = QtWidgets.QPushButton("Kapat")
                close_button.clicked.connect(dialog.close)
                layout.addWidget(close_button)
                
                dialog.setLayout(layout)
                dialog.exec_()
            else:
                QtWidgets.QMessageBox.warning(None, "Uyarı", "Proje bilgileri bulunamadı!")
                
        except Error as e:
            print(f"Rapor gösterilirken hata: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Rapor gösterilirken hata oluştu: {e}")

    def show_projeler_table(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT id, ad, aciklama, baslangic_tarihi, bitis_tarihi, durum, oncelik
                FROM projeler
            """)
            data = cursor.fetchall()
            self.tablo.setRowCount(len(data))
            self.tablo.setColumnCount(7)
            headers = ["ID", "Proje Adı", "Açıklama", "Başlangıç Tarihi", "Bitiş Tarihi", "Durum", "Öncelik"]
            self.tablo.setHorizontalHeaderLabels(headers)
            
            for i, row in enumerate(data):
                for j, value in enumerate(row):
                    if isinstance(value, datetime):
                        value = value.strftime('%Y-%m-%d')
                    elif value is None:
                        value = ""
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.tablo.setItem(i, j, item)
            
            print(f"Projeler tablosu gösterildi: {len(data)} satır")
        except Error as e:
            print(f"Projeler tablosu gösterilirken hata: {e}")

    def show_gorevler_table(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT g.id, g.baslik, g.aciklama, g.baslangic_tarihi, g.bitis_tarihi, 
                       g.durum, g.oncelik, p.ad as proje_adi
                FROM gorevler g
                LEFT JOIN projeler p ON g.proje_id = p.id
            """)
            data = cursor.fetchall()
            self.tablo.setRowCount(len(data))
            self.tablo.setColumnCount(8)
            headers = ["ID", "Başlık", "Açıklama", "Başlangıç Tarihi", "Bitiş Tarihi", 
                      "Durum", "Öncelik", "Proje"]
            self.tablo.setHorizontalHeaderLabels(headers)
            
            for i, row in enumerate(data):
                for j, value in enumerate(row):
                    if isinstance(value, datetime):
                        value = value.strftime('%Y-%m-%d')
                    elif value is None:
                        value = ""
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.tablo.setItem(i, j, item)
            
            print(f"Görevler tablosu gösterildi: {len(data)} satır")
        except Error as e:
            print(f"Görevler tablosu gösterilirken hata: {e}")

    def show_raporlar_table(self):
        try:
            cursor = self.db.get_connection().cursor()
            # Seçili projenin raporlarını getir
            cursor.execute("""
                SELECT r.id, r.baslik, r.icerik, p.ad as proje_adi, pr.ilerleme_orani
                FROM raporlar r
                JOIN proje_raporlar pr ON r.id = pr.rapor_id
                JOIN projeler p ON pr.proje_id = p.id
                WHERE p.id = %s
                ORDER BY r.id DESC
            """, (self.combobox_proje.currentData(),))
            data = cursor.fetchall()
            self.tablo.setRowCount(len(data))
            self.tablo.setColumnCount(5)
            headers = ["ID", "Başlık", "İçerik", "Proje", "İlerleme Oranı"]
            self.tablo.setHorizontalHeaderLabels(headers)
            
            # Sütun genişliklerini ayarla
            self.tablo.setColumnWidth(0, 50)  # ID
            self.tablo.setColumnWidth(1, 150)  # Başlık
            self.tablo.setColumnWidth(2, 300)  # İçerik
            self.tablo.setColumnWidth(3, 150)  # Proje
            self.tablo.setColumnWidth(4, 100)  # İlerleme Oranı
            
            for i, row in enumerate(data):
                for j, value in enumerate(row):
                    if value is None:
                        value = ""
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.tablo.setItem(i, j, item)
            
            print(f"Raporlar tablosu gösterildi: {len(data)} satır")
        except Error as e:
            print(f"Raporlar tablosu gösterilirken hata: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Raporlar tablosu gösterilirken hata oluştu: {e}")

    def show_kullanicilar_table(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT id, ad_soyad, eposta, rol
                FROM kullanicilar
            """)
            data = cursor.fetchall()
            self.tablo.setRowCount(len(data))
            self.tablo.setColumnCount(4)
            headers = ["ID", "Ad Soyad", "E-posta", "Rol"]
            self.tablo.setHorizontalHeaderLabels(headers)
            
            for i, row in enumerate(data):
                for j, value in enumerate(row):
                    if value is None:
                        value = ""
                    item = QtWidgets.QTableWidgetItem(str(value))
                    self.tablo.setItem(i, j, item)
            
            print(f"Kullanıcılar tablosu gösterildi: {len(data)} satır")
        except Error as e:
            print(f"Kullanıcılar tablosu gösterilirken hata: {e}")

    def show_selected_graph(self):
        """Seçilen grafik türüne göre grafiği göster"""
        graph_type = self.combobox_grafik_turu.currentText()
        
        if graph_type == "Proje İlerleme Grafiği":
            self.show_project_progress_graph()
        elif graph_type == "Risk Analiz Grafiği":
            self.show_risk_analysis_graph()
        elif graph_type == "Aylık İlerleme Grafiği":
            self.show_monthly_progress_graph()
        elif graph_type == "Görev Durumları Grafiği":
            self.show_task_status_graph()
        elif graph_type == "Proje Tamamlanma Grafiği":
            self.show_project_completion_graph()

    def show_project_progress_graph(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT p.ad, AVG(pr.ilerleme_orani) as ortalama_ilerleme
                FROM projeler p
                LEFT JOIN proje_raporlar pr ON p.id = pr.proje_id
                GROUP BY p.id, p.ad
            """)
            data = cursor.fetchall()
            
            # Grafik için yeni bir figure oluştur
            fig = Figure(figsize=(6, 4))  # Boyutu küçülttüm
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            
            # Verileri hazırla
            project_names = [row[0] for row in data]
            progress_values = [row[1] if row[1] is not None else 0 for row in data]
            
            # Bar grafik oluştur
            bars = ax.bar(project_names, progress_values)
            ax.set_title('Projelerin İlerleme Durumu')
            ax.set_xlabel('Projeler')
            ax.set_ylabel('İlerleme Oranı (%)')
            ax.set_ylim(0, 100)
            
            # Değerleri barların üzerine yaz
            for bar in bars:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height,
                        f'{height:.1f}%', ha='center', va='bottom')
            
            # X ekseni etiketlerini döndür
            plt.setp(ax.get_xticklabels(), rotation=45, ha='right')
            
            # Grafiği widget'a ekle
            self.grafik.setScene(QtWidgets.QGraphicsScene())
            self.grafik.scene().addWidget(canvas)
            print("İlerleme grafiği gösterildi")
        except Error as e:
            print(f"İlerleme grafiği gösterilirken hata: {e}")

    def show_task_status_graph(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT durum, COUNT(*) as sayi
                FROM gorevler
                GROUP BY durum
            """)
            data = cursor.fetchall()
            
            fig = Figure(figsize=(6, 4))  # Boyutu küçülttüm
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            
            statuses = [row[0] for row in data]
            counts = [row[1] for row in data]
            
            ax.pie(counts, labels=statuses, autopct='%1.1f%%', explode=[0.05]*len(statuses))
            ax.set_title('Görev Durumları Dağılımı')
            
            self.grafik.setScene(QtWidgets.QGraphicsScene())
            self.grafik.scene().addWidget(canvas)
            print("Görev durumları grafiği gösterildi")
        except Error as e:
            print(f"Görev durumları grafiği gösterilirken hata: {e}")

    def show_project_completion_graph(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT p.ad,
                       COUNT(CASE WHEN g.durum = 'Tamamlandı' THEN 1 END) as tamamlanan,
                       COUNT(CASE WHEN g.durum != 'Tamamlandı' THEN 1 END) as devam_eden
                FROM projeler p
                LEFT JOIN gorevler g ON p.id = g.proje_id
                GROUP BY p.id, p.ad
            """)
            data = cursor.fetchall()
            
            fig = Figure(figsize=(6, 4))  # Boyutu küçülttüm
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            
            project_names = [row[0] for row in data]
            completed = [row[1] for row in data]
            ongoing = [row[2] for row in data]
            
            x = np.arange(len(project_names))
            width = 0.35
            
            ax.bar(x - width/2, completed, width, label='Tamamlanan')
            ax.bar(x + width/2, ongoing, width, label='Devam Eden')
            
            ax.set_title('Projelere Göre Görev Tamamlanma Durumu')
            ax.set_xlabel('Projeler')
            ax.set_ylabel('Görev Sayısı')
            ax.set_xticks(x)
            ax.set_xticklabels(project_names, rotation=45, ha='right')
            ax.legend()
            
            self.grafik.setScene(QtWidgets.QGraphicsScene())
            self.grafik.scene().addWidget(canvas)
            print("Proje tamamlanma grafiği gösterildi")
        except Error as e:
            print(f"Proje tamamlanma grafiği gösterilirken hata: {e}")

    def show_monthly_progress_graph(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT DATE_FORMAT(baslangic_tarihi, '%Y-%m') as ay,
                       COUNT(*) as proje_sayisi
                FROM projeler
                GROUP BY DATE_FORMAT(baslangic_tarihi, '%Y-%m')
                ORDER BY ay
            """)
            data = cursor.fetchall()
            
            fig = Figure(figsize=(6, 4))  # Boyutu küçülttüm
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            
            months = [row[0] for row in data]
            counts = [row[1] for row in data]
            
            ax.plot(months, counts, marker='o', linestyle='-', linewidth=2)
            ax.set_title('Aylık Proje Başlangıç Dağılımı')
            ax.set_xlabel('Ay')
            ax.set_ylabel('Proje Sayısı')
            
            plt.setp(ax.get_xticklabels(), rotation=45, ha='right')
            
            self.grafik.setScene(QtWidgets.QGraphicsScene())
            self.grafik.scene().addWidget(canvas)
            print("Aylık ilerleme grafiği gösterildi")
        except Error as e:
            print(f"Aylık ilerleme grafiği gösterilirken hata: {e}")

    def show_risk_analysis_graph(self):
        try:
            cursor = self.db.get_connection().cursor()
            cursor.execute("""
                SELECT g.baslik, g.aciklama, g.oncelik, p.ad as proje_adi, g.durum
                FROM gorevler g
                JOIN projeler p ON g.proje_id = p.id
                WHERE g.durum = 'Devam Ediyor' 
                AND g.oncelik IN ('Yüksek', 'Orta', 'Düşük', 'Kritik')
                AND p.id = %s
                ORDER BY 
                    CASE g.oncelik 
                        WHEN 'Kritik' THEN 1 
                        WHEN 'Yüksek' THEN 2 
                        WHEN 'Orta' THEN 3 
                        WHEN 'Düşük' THEN 4 
                    END,
                    g.id DESC
            """, (self.combobox_proje.currentData(),))
            data = cursor.fetchall()
            
            if not data:
                QtWidgets.QMessageBox.information(None, "Bilgi", "Bu proje için aktif risk bulunmamaktadır.")
                return
            
            # Grafik için yeni bir figure oluştur
            fig = Figure(figsize=(6, 4))
            canvas = FigureCanvas(fig)
            ax = fig.add_subplot(111)
            
            # Verileri hazırla
            risk_titles = [f"{row[0]} ({row[3]})" for row in data]
            risk_priorities = [row[2] for row in data]
            
            # Risk seviyelerine göre renk kodlaması
            colors = {
                'Kritik': '#8B0000',  # Koyu kırmızı
                'Yüksek': '#FF0000',  # Kırmızı
                'Orta': '#FFA500',    # Turuncu
                'Düşük': '#008000'    # Yeşil
            }
            risk_colors = [colors.get(priority, 'gray') for priority in risk_priorities]
            
            # Yatay bar grafik oluştur
            bars = ax.barh(range(len(risk_titles)), [1]*len(risk_titles), color=risk_colors)
            ax.set_title('Risk Analizi')
            ax.set_yticks(range(len(risk_titles)))
            ax.set_yticklabels(risk_titles)
            ax.set_xlim(0, 1)
            ax.set_xticks([])
            
            # Risk açıklamalarını ekle
            for i, (title, desc, priority) in enumerate(zip(risk_titles, [row[1] for row in data], risk_priorities)):
                ax.text(0.5, i, f"Öncelik: {priority}", ha='center', va='center', color='white', fontweight='bold')
            
            # Grafiği widget'a ekle
            self.grafik.setScene(QtWidgets.QGraphicsScene())
            self.grafik.scene().addWidget(canvas)
            print("Risk analiz grafiği gösterildi")
        except Error as e:
            print(f"Risk analiz grafiği gösterilirken hata: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Risk analiz grafiği gösterilirken hata oluştu: {e}")

    def download_data(self):
        try:
            # Kullanıcıya kaydetme konumu seçtir
            file_path, _ = QtWidgets.QFileDialog.getSaveFileName(
                None, "Verileri Kaydet", "", "Excel Dosyası (*.xlsx);;CSV Dosyası (*.csv);;Grafik (*.png)"
            )
            
            if not file_path:
                return
                
            if file_path.endswith('.png'):
                # Grafik kaydetme
                if not self.grafik.scene():
                    QtWidgets.QMessageBox.warning(None, "Uyarı", "Kaydedilecek grafik bulunamadı!")
                    return
                    
                # Grafik sahnesini görüntüye dönüştür
                image = QtGui.QImage(self.grafik.viewport().size(), QtGui.QImage.Format_ARGB32)
                image.fill(QtCore.Qt.transparent)
                painter = QtGui.QPainter(image)
                self.grafik.render(painter)
                painter.end()
                
                # Görüntüyü kaydet
                image.save(file_path)
                QtWidgets.QMessageBox.information(None, "Başarılı", "Grafik başarıyla kaydedildi!")
                return
                
            cursor = self.db.get_connection().cursor()
            
            # Tüm tabloların verilerini al
            tables = ['projeler', 'gorevler', 'raporlar', 'kullanicilar']
            data = {}
            
            for table in tables:
                if table == 'gorevler':
                    # Görevler tablosu için özel sorgu (riskleri de içerecek şekilde)
                    cursor.execute("""
                        SELECT g.*, p.ad as proje_adi 
                        FROM gorevler g
                        LEFT JOIN projeler p ON g.proje_id = p.id
                    """)
                elif table == 'raporlar':
                    # Raporlar tablosu için özel sorgu
                    cursor.execute("""
                        SELECT r.*, p.ad as proje_adi, pr.ilerleme_orani
                        FROM raporlar r
                        LEFT JOIN proje_raporlar pr ON r.id = pr.rapor_id
                        LEFT JOIN projeler p ON pr.proje_id = p.id
                    """)
                else:
                    cursor.execute(f"SELECT * FROM {table}")
                
                data[table] = cursor.fetchall()
                
                # Sütun isimlerini al
                cursor.execute(f"SHOW COLUMNS FROM {table}")
                columns = [column[0] for column in cursor.fetchall()]
                
                # Özel tablolar için ek sütunlar
                if table == 'gorevler':
                    columns.append('proje_adi')
                elif table == 'raporlar':
                    columns.extend(['proje_adi', 'ilerleme_orani'])
                
                data[f"{table}_columns"] = columns
            
            # Excel dosyası oluştur
            if file_path.endswith('.xlsx'):
                import pandas as pd
                with pd.ExcelWriter(file_path, engine='openpyxl') as writer:
                    for table in tables:
                        df = pd.DataFrame(data[table], columns=data[f"{table}_columns"])
                        # Tarih sütunlarını formatla
                        for col in df.columns:
                            if 'tarih' in col.lower():
                                df[col] = pd.to_datetime(df[col]).dt.strftime('%Y-%m-%d')
                        df.to_excel(writer, sheet_name=table, index=False)
            
            # CSV dosyası oluştur
            elif file_path.endswith('.csv'):
                import csv
                with open(file_path, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    # Her tablo için ayrı bir bölüm oluştur
                    for table in tables:
                        writer.writerow([f"=== {table.upper()} ==="])
                        writer.writerow(data[f"{table}_columns"])
                        writer.writerows(data[table])
                        writer.writerow([])  # Boş satır ekle
            
            QtWidgets.QMessageBox.information(None, "Başarılı", "Veriler başarıyla kaydedildi!")
            print(f"Veriler {file_path} konumuna kaydedildi")
            
        except Error as e:
            print(f"Veri indirme hatası: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Veri indirme hatası: {e}")
        except Exception as e:
            print(f"Beklenmeyen hata: {e}")
            QtWidgets.QMessageBox.critical(None, "Hata", f"Beklenmeyen hata: {e}")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
